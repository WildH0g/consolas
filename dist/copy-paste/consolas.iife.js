var ConsolAS=function(p){"use strict";function O(e){return Array.isArray(e)&&Array.isArray(e==null?void 0:e[0])}function g(e){return typeof e=="object"&&!Array.isArray(e)}function T(e){return Array.isArray(e)&&e.every(g)}const d={isTwoDimAr:O,isObject:g,isObjectArray:T};function y(e,n={}){let{addIndices:i}=n;i===void 0&&(i=!0);const l=!d.isTwoDimAr(e);l&&(e=E(e,"table(TwoDimArray)"));const r=[...e[0]];if(!l&&i){i==="row-only"&&e.shift(),e.forEach((s,u)=>s.unshift(u+""));let t;i===!0&&(t=new Array(e[0].length).fill().map((s,u)=>u===0?"(index)":u-1+"")),i==="row-only"&&(t=["(index)",...r]),e.unshift(t)}e=e.map(t=>t.map(m));const c=e.reduce((t,s)=>{const u=s.map(f=>(f+"").length);return t.length?t.map((f,a)=>f<u[a]?u[a]:f):u},[]);return e.reduce((t,s,u)=>{const f=s.map((a,h)=>j(a,c[h]));return t.length&&(t+=`
`),u===1&&(t+=`|${f.map(a=>a.replace(/\|/g,"-")).join("|").replace(/[^|]/g,"-")}|
`.replace(/\|-/g,"| ").replace(/-\|/g," |")),t+`|${f.join("|")}|`},"")}function j(e,n){e+="";const i=1,l=n-e.length-i+2;return`${" ".repeat(i)}${e}${" ".repeat(l)}`}function m(e){if(typeof e!="object")return e;let n=JSON.stringify(e);return n.length>25&&(n=n.substring(0,21)+"..."),n}function E(e,n){return e=e+"",e.length>25&&(e=e.slice(0,21)+"..."),[["Error","Source","Input"],["Invalid argument",n,e]]}function A(e){if(!d.isObject(e))throw"This is not an object";const n=["(index)","Value"];let i=M(e,n).map(r=>r.map(c=>c&&c!==void 0?c:"")).map(r=>{const c=n.length-r.length;for(let o=0;o<c;o++)r.push("");return r});const l=[n,...i];return y(l,{addIndices:!1})}function I(e){return Array.isArray?e.reduce((n,i,l)=>(n[l]=i,n),{}):e}function b(e,n,i,l){return e.forEach(r=>{n.indexOf(r[0])===-1&&n.push(r[0])}),e.reduce((r,[c,o])=>{if(d.isObject(o))return b(Object.entries(o),n,i,!1);const t=n.findIndex(s=>s===c);return r[t]=o,[...r].map(s=>s!==void 0?s:l?"":"{...}")},[i,""])}function M(e,n){return Object.entries(e).map(([r,c])=>{let o=!1;return Array.isArray(c)&&(c=I(c),o=!0),d.isObject(c)?b(Object.entries(c),n,r,o):[r,c]})}function L(e){if(!d.isObjectArray(e))throw"This is not an object array";const n={};let i=-1;const l=[];let r=[];for(const o of e){const t=Object.entries(o),s=new Array(t.length).fill("");t.forEach(([u,f])=>{u in n||(n[u]=++i,l.push(u)),s[n[u]]=f}),r.push(s)}r.forEach(o=>{for(let t=0;t<o.length;t++)t in o||(o[t]="")}),r.forEach(o=>{if(o.length===l.length)return;const t=l.length-o.length;for(let s=0;s<t;s++)o.push("")});const c=[l,...r];return y(c,{addIndices:"row-only"})}const P=e=>e;function R(){globalThis.require=globalThis.require||P}R();const _=function(){const e=new WeakMap,n=["table"],i=["log","warn","error"],l=new WeakMap;class r{constructor(){return r.instance||(e.set(this,!1),l.set(this,[]),i.forEach(t=>this[t]=console[t]),r.instance=this),r.instance}polyfill(){return this.isPolyfilled?this:(n.forEach(t=>{t in Object.getPrototypeOf(console)||(Object.getPrototypeOf(console)[t]=this[t].bind(this))}),e.set(this,!0),this)}get isPolyfilled(){return e.get(this)}table(t){const s={isTwoDimAr:y,isObject:A,isObjectArray:L},u=Object.keys(s).reduce((a,h)=>!a&&d[h](t)?s[h]:a,null);if(u===null)throw new Error("Cannot convert input to table");const f=c(u(t),this);return console.log(f),f}tree(t,s){console.log('⏳ Method "tree" not implemented yet')}assert(){console.log('⏳ Method "assert" not implemented yet')}group(){console.log('⏳ Method "group" not implemented yet')}dir(){console.log('⏳ Method "dir" not implemented yet')}count(){console.log('⏳ Method "count" not implemented yet')}countReset(){console.log('⏳ Method "countReset" not implemented yet')}help(){console.log('⏳ Method "help" not implemented yet')}}r.instance=null;function c(o,t){return l.get(t).push(o),o}return r}();return p.ConsolAS=_,Object.defineProperty(p,Symbol.toStringTag,{value:"Module"}),p}({});

ConsolAS = ConsolAS.ConsolAS;