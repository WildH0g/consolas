var init=function(d){"use strict";function O(e){return Array.isArray(e)&&Array.isArray(e==null?void 0:e[0])}function m(e){return typeof e=="object"&&!Array.isArray(e)}const f={isTwoDimAr:O,isObject:m};function p(e,{addIndices:n=!0}={}){const l=!f.isTwoDimAr(e);if(l&&(e=M(e,"table(TwoDimArray)")),!l&&n){e.forEach((i,r)=>i.unshift(r+""));const t=new Array(e[0].length).fill().map((i,r)=>r===0?"(index)":r-1+"");e.unshift(t)}e=e.map(t=>t.map(j));const c=e.reduce((t,i)=>{const r=i.map(s=>(s+"").length);return t.length?t.map((s,u)=>s<r[u]?r[u]:s):r},[]);return e.reduce((t,i,r)=>{const s=i.map((u,a)=>T(u,c[a]));return t.length&&(t+=`
`),r===1&&(t+=`|${s.map(u=>u.replace(/\|/g,"-")).join("|").replace(/[^|]/g,"-")}|
`.replace(/\|-/g,"| ").replace(/-\|/g," |")),t+`|${s.join("|")}|`},"")}function T(e,n){e+="";const l=1,c=n-e.length-l+2;return`${" ".repeat(l)}${e}${" ".repeat(c)}`}function j(e){if(typeof e!="object")return e;let n=JSON.stringify(e);return n.length>25&&(n=n.substring(0,21)+"..."),n}function M(e,n){return e=e+"",e.length>25&&(e=e.slice(0,21)+"..."),[["Error","Source","Input"],["Invalid argument",n,e]]}function E(e){if(!f.isObject(e))throw"This is not an object";const n=["(index)","Value"];let l=I(e,n).map(o=>o.map(t=>t&&t!==void 0?t:"")).map(o=>{const t=n.length-o.length;for(let i=0;i<t;i++)o.push("");return o});const c=[n,...l];return p(c,{addIndices:!1})}function L(e){return Array.isArray?e.reduce((n,l,c)=>(n[c]=l,n),{}):e}function h(e,n,l,c){return e.forEach(o=>{n.indexOf(o[0])===-1&&n.push(o[0])}),e.reduce((o,[t,i])=>{if(f.isObject(i))return h(Object.entries(i),n,l,!1);const r=n.findIndex(s=>s===t);return o[r]=i,[...o].map(s=>s!==void 0?s:c?"":"{...}")},[l,""])}function I(e,n){return Object.entries(e).map(([o,t])=>{let i=!1;return Array.isArray(t)&&(t=L(t),i=!0),f.isObject(t)?h(Object.entries(t),n,o,i):[o,t]})}const P=e=>e;function R(){globalThis.require=globalThis.require||P}R();const y=function(){const e=new WeakMap,n=["table"],l=["log","warn","error"],c=new WeakMap;class o{constructor(){return o.instance||(e.set(this,!1),c.set(this,[]),l.forEach(r=>this[r]=console[r]),o.instance=this),o.instance}polyfill(){return this.isPolyfilled?this:(n.forEach(r=>{r in Object.getPrototypeOf(console)||(Object.getPrototypeOf(console)[r]=this[r].bind(this))}),e.set(this,!0),this)}get isPolyfilled(){return e.get(this)}table(r){const s={isTwoDimAr:p,isObject:E},u=Object.keys(s).reduce((g,b)=>!g&&f[b](r)?s[b]:g,null);if(u===null)throw new Error("Cannot convert input to table");const a=t(u(r),this);return console.log(a),a}tree(r,s){console.log('⏳ Method "tree" not implemented yet')}assert(){console.log('⏳ Method "assert" not implemented yet')}group(){console.log('⏳ Method "group" not implemented yet')}dir(){console.log('⏳ Method "dir" not implemented yet')}count(){console.log('⏳ Method "count" not implemented yet')}countReset(){console.log('⏳ Method "countReset" not implemented yet')}help(){console.log('⏳ Method "help" not implemented yet')}}o.instance=null;function t(i,r){return c.get(r).push(i),i}return o}();function _(e){return(e==null?void 0:e.polyfill)||!1?new y().polyfill():new y}return d.init=_,Object.defineProperty(d,Symbol.toStringTag,{value:"Module"}),d}({});
