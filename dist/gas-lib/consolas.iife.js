var lib_=function(y){"use strict";function T(e){return Array.isArray(e)&&Array.isArray(e==null?void 0:e[0])}function g(e){return typeof e=="object"&&!Array.isArray(e)}function j(e){return Array.isArray(e)&&e.every(g)}const d={isTwoDimAr:T,isObject:g,isObjectArray:j};function p(e,n={}){let{addIndices:o}=n;o===void 0&&(o=!0);const c=!d.isTwoDimAr(e);c&&(e=I(e,"table(TwoDimArray)"));const r=[...e[0]];if(!c&&o){o==="row-only"&&e.shift(),e.forEach((s,f)=>s.unshift(f+""));let t;o===!0&&(t=new Array(e[0].length).fill().map((s,f)=>f===0?"(index)":f-1+"")),o==="row-only"&&(t=["(index)",...r]),e.unshift(t)}e=e.map(t=>t.map(E));const l=e.reduce((t,s)=>{const f=s.map(u=>(u+"").length);return t.length?t.map((u,a)=>u<f[a]?f[a]:u):f},[]);return e.reduce((t,s,f)=>{const u=s.map((a,h)=>m(a,l[h]));return t.length&&(t+=`
`),f===1&&(t+=`|${u.map(a=>a.replace(/\|/g,"-")).join("|").replace(/[^|]/g,"-")}|
`.replace(/\|-/g,"| ").replace(/-\|/g," |")),t+`|${u.join("|")}|`},"")}function m(e,n){e+="";const o=1,c=n-e.length-o+2;return`${" ".repeat(o)}${e}${" ".repeat(c)}`}function E(e){if(typeof e!="object")return e;let n=JSON.stringify(e);return n.length>25&&(n=n.substring(0,21)+"..."),n}function I(e,n){return e=e+"",e.length>25&&(e=e.slice(0,21)+"..."),[["Error","Source","Input"],["Invalid argument",n,e]]}function M(e){if(!d.isObject(e))throw"This is not an object";const n=["(index)","Value"];let o=L(e,n).map(r=>r.map(l=>l&&l!==void 0?l:"")).map(r=>{const l=n.length-r.length;for(let i=0;i<l;i++)r.push("");return r});const c=[n,...o];return p(c,{addIndices:!1})}function A(e){return Array.isArray?e.reduce((n,o,c)=>(n[c]=o,n),{}):e}function b(e,n,o,c){return e.forEach(r=>{n.indexOf(r[0])===-1&&n.push(r[0])}),e.reduce((r,[l,i])=>{if(d.isObject(i))return b(Object.entries(i),n,o,!1);const t=n.findIndex(s=>s===l);return r[t]=i,[...r].map(s=>s!==void 0?s:c?"":"{...}")},[o,""])}function L(e,n){return Object.entries(e).map(([r,l])=>{let i=!1;return Array.isArray(l)&&(l=A(l),i=!0),d.isObject(l)?b(Object.entries(l),n,r,i):[r,l]})}function P(e){if(!d.isObjectArray(e))throw"This is not an object array";const n={};let o=-1;const c=[];let r=[];for(const i of e){const t=Object.entries(i),s=new Array(t.length).fill("");t.forEach(([f,u])=>{f in n||(n[f]=++o,c.push(f)),s[n[f]]=u}),r.push(s)}r.forEach(i=>{for(let t=0;t<i.length;t++)t in i||(i[t]="")}),r.forEach(i=>{if(i.length===c.length)return;const t=c.length-i.length;for(let s=0;s<t;s++)i.push("")});const l=[c,...r];return p(l,{addIndices:"row-only"})}const _=e=>e;function R(){globalThis.require=globalThis.require||_}R();const O=function(){const e=new WeakMap,n=["table"],o=["log","warn","error"],c=new WeakMap;class r{constructor(){return r.instance||(e.set(this,!1),c.set(this,[]),o.forEach(t=>this[t]=console[t]),r.instance=this),r.instance}polyfill(){return this.isPolyfilled?this:(n.forEach(t=>{t in Object.getPrototypeOf(console)||(Object.getPrototypeOf(console)[t]=this[t].bind(this))}),e.set(this,!0),this)}get isPolyfilled(){return e.get(this)}table(t){const s={isTwoDimAr:p,isObject:M,isObjectArray:P},f=Object.keys(s).reduce((a,h)=>!a&&d[h](t)?s[h]:a,null);if(f===null)throw new Error("Cannot convert input to table");const u=l(f(t),this);return console.log(u),u}tree(t,s){console.log('⏳ Method "tree" not implemented yet')}assert(){console.log('⏳ Method "assert" not implemented yet')}group(){console.log('⏳ Method "group" not implemented yet')}dir(){console.log('⏳ Method "dir" not implemented yet')}count(){console.log('⏳ Method "count" not implemented yet')}countReset(){console.log('⏳ Method "countReset" not implemented yet')}help(){console.log('⏳ Method "help" not implemented yet')}}r.instance=null;function l(i,t){return c.get(t).push(i),i}return r}();function w(e){return(e==null?void 0:e.polyfill)||!1?new O().polyfill():new O}return y.init=w,Object.defineProperty(y,Symbol.toStringTag,{value:"Module"}),y}({});
